# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from dom import ensure_id, clear
from elementmaker import E

from book_list.constants import book_list_container_id
from book_list.globals import get_current_query
from book_list.router import push_state, back as router_back
from book_list.library_data import current_library_id


panel_handlers = {}
default_panel_handler = None


def set_panel_handler(panel, handler):
    panel_handlers[panel] = handler


def set_default_panel_handler(handler):
    nonlocal default_panel_handler
    default_panel_handler = handler


def develop_panel(container):
    # To use, go to URL:
    # http://localhost:8080/?panel=develop-widgets&widget_module=<module name>
    # Implement the develop(container) method in that module.
    q = get_current_query()
    m = q.widget_module
    if m:
        m = get_module(m)
        if m?.develop:
            m.develop(container)
        else:
            container.textContent = 'The module {} either does not exist or has no develop method.'.format(q.widget_module)

set_panel_handler('develop-widgets', develop_panel)


def currently_showing_panel():
    c = document.getElementById(book_list_container_id)
    return c.dataset.panel

def number_of_subpanels():
    c = document.getElementById(book_list_container_id)
    return c.lastChild.childNodes.length


def show_panel(panel, query_data, replace=False):
    if currently_showing_panel() is panel:
        return
    query = {k:query_data[k] for k in query}
    if panel is not 'home':
        lid = current_library_id()
        if lid:
            query.library_id = lid
    push_state(query, replace=replace)


def close_subpanel():
    c = document.getElementById(book_list_container_id).lastChild
    panel_to_remove = c.lastChild
    if panel_to_remove:
        c.remove(panel_to_remove)
        if c.lastChild:
            c.lastChild.style.display = 'block'
        else:
            c.style.display = 'none'


def back():
    if number_of_subpanels() > 0:
        return close_subpanel()
    router_back()


def apply_url_state(state):
    panel = state.panel or 'home'
    if currently_showing_panel() is panel:
        return
    c = document.getElementById(book_list_container_id)
    clear(c)
    c.appendChild(E.div())
    c.appendChild(E.div(style='display:none'))
    c.dataset.panel = panel
    handler = panel_handlers[panel] or default_panel_handler
    handler(ensure_id(c.firstChild, 'panel'))

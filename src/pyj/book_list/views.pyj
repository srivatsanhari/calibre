# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals

import traceback

from ajax import ajax_send
from dom import add_extra_css, clear, ensure_id, set_css
from elementmaker import E
from gettext import gettext as _
from modals import error_dialog
from utils import conditional_timeout
from session import get_interface_data
from widgets import create_button, create_spinner

from book_list.globals import get_session_data
from book_list.cover_grid import cover_grid_css, create_item as create_cover_grid_item, init as init_cover_grid, append_item as cover_grid_append_item
from book_list.top_bar import create_top_bar
from book_list.router import back
from book_list.ui import set_panel_handler
from book_list.library_data import current_library_id, load_status, ensure_current_library_data, library_data

ALLOWED_MODES = {'cover_grid'}
DEFAULT_MODE = 'cover_grid'

add_extra_css(def():
    ans = cover_grid_css.call()
    return ans
)

book_list_data = {
    'container_id': None, 'shown_book_ids': set(), 'mode': None, 'fetching_more_books': None,
}


def clear_grid():
    container = document.getElementById(book_list_data.container_id)
    # We replace the div entirely so that any styles associated with it are also removed
    container.removeChild(container.lastChild.previousSibling)
    container.insertBefore(E.div(), container.lastChild)
    book_list_data.shown_book_ids = set()
    book_list_data.init_grid(container.lastChild.previousSibling)


def show_book_details():
    pass


def render_id(book_id):
    l = book_list_data.shown_book_ids.length
    book_list_data.shown_book_ids.add(book_id)
    if l < book_list_data.shown_book_ids.length:
        return book_list_data.render_book(book_id, show_book_details.bind(book_id))


def render_ids(book_ids):
    book_ids = book_ids or library_data.search_result.book_ids
    div = document.getElementById(book_list_data.container_id).lastChild.previousSibling
    for book_id in book_ids:
        child = render_id(book_id)
        if child is not None:
            book_list_data.append_item(div, child)


def apply_view_mode(mode=DEFAULT_MODE):
    if book_list_data.mode is mode:
        return
    if mode not in ALLOWED_MODES:
        mode = 'cover_grid'
    book_list_data.mode = mode
    if mode is 'cover_grid':
        book_list_data.render_book = create_cover_grid_item
        book_list_data.init_grid = init_cover_grid
        book_list_data.append_item = cover_grid_append_item
    clear_grid()
    render_ids()


def update_fetching_status():
    more = document.getElementById(book_list_data.container_id).lastChild
    if book_list_data.fetching_more_books:
        more.firstChild.style.display = 'none'
        more.lastChild.style.display = 'block'
    elif library_data.search_result.total_num > book_list_data.shown_book_ids.length:
        more.firstChild.style.display = 'block'
        more.lastChild.style.display = 'none'
    else:
        more.firstChild.style.display = 'none'
        more.lastChild.style.display = 'none'


def abort_get_more_books(no_update):
    if book_list_data.fetching_more_books:
        book_list_data.fetching_more_books.abort()
        book_list_data.fetching_more_books = None
        if not no_update:
            update_fetching_status()


def got_more_books(end_type, xhr, event):
    if book_list_data.fetching_more_books is not xhr:
        return  # Fetching was aborted
    book_list_data.fetching_more_books = None
    update_fetching_status()
    if end_type is 'load':
        try:
            data = JSON.parse(xhr.responseText)
            for key in data.metadata:
                library_data.metadata[key] = data.metadata[key]
            if not data.search_result.book_ids:
                raise Exception('No books ids object in search result from server')
            library_data.search_result = data.search_result
            render_ids(data.search_result.book_ids)
        except Exception:
            error_dialog(_('Could not get more books'), _('Server returned an invalid response'), traceback.format_exc())
    elif end_type is not 'abort':
        error_dialog(_('Could not get more books'), xhr.error_html)


def get_more_books():
    data = {'offset':book_list_data.shown_book_ids.length}
    for key in 'query', 'sort', 'sort_order':
        data[key] = library_data.search_result[key]
    book_list_data.fetching_more_books = ajax_send(
        'interface-data/more-books', data, got_more_books,
        query={'library_id':current_library_id()}
    )
    update_fetching_status()


def create_more_button(more):
    more.appendChild(create_button(
        _('Show more books'), 'cloud-download', get_more_books
    ))
    more.lastChild.setAttribute('rel', 'next')
    set_css(more.firstChild, display='block', margin_left='auto', margin_right='auto')
    set_css(more, font_size='1.5rem', padding_top='1.5rem', margin_bottom='1.5rem', text_align='center', display='flex')
    more.appendChild(E.div(
        create_spinner(), '\xa0' + _('Fetching metadata for more books, please wait') + 'â€¦',
        style='margin-left:auto; margin-right:auto; display:none')
    )
    update_fetching_status()


def create_books_list(container):
    book_list_data.container_id = ensure_id(container)
    book_list_data.shown_book_ids = set()
    book_list_data.mode = None
    abort_get_more_books(True)
    container.appendChild(E.div(style='display:none'))
    container.appendChild(E.div()), container.appendChild(E.div())
    apply_view_mode(get_session_data().get('view_mode'))
    create_more_button(container.lastChild)


def check_for_books_loaded():
    container = this
    if load_status.loading:
        conditional_timeout(container.id, 5, check_for_books_loaded)
        return
    container = container.lastChild
    clear(container)
    if not load_status.ok:
        err = E.div()
        err.innerHTML = load_status.error_html
        container.appendChild(E.div(
            style='margin: 1ex 1em',
            E.div(_('Failed to load books from calibre library, with error:')),
            err,
            E.div(
                style='margin-top: 1em; border-top: solid 1px currentColor; padding-top: 1ex;',
            E.a(onclick=back, href='javascript: void(0)', style='color: blue', _('Go back to the home page')))
            ),
        )
        return
    create_books_list(container)


def init(container_id):
    interface_data = get_interface_data()
    ensure_current_library_data()
    container = document.getElementById(container_id)
    lid = container.dataset.library_id = current_library_id()
    title = interface_data.library_map[lid]
    create_top_bar(container_id, title=title, action=back, icon='home')
    container.appendChild(E.div())
    container.lastChild.appendChild(E.div(_('Loading books from the {} calibre library, please wait...').format(title), style='margin: 1ex 1em'))
    conditional_timeout(container_id, 5, check_for_books_loaded)


set_panel_handler('book_list', init)
